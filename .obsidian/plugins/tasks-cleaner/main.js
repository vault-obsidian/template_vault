/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var D=Object.prototype.hasOwnProperty;var C=(i,a)=>{for(var t in a)m(i,t,{get:a[t],enumerable:!0})},P=(i,a,t,e)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of b(a))!D.call(i,s)&&s!==t&&m(i,s,{get:()=>a[s],enumerable:!(e=y(a,s))||e.enumerable});return i};var v=i=>P(m({},"__esModule",{value:!0}),i);var S={};C(S,{default:()=>p});module.exports=v(S);var n=require("obsidian"),x={daysThreshold:7,taskPattern:"- \\[x\\].*?\u2705\\s*(\\d{4}-\\d{2}-\\d{2})",filenamePattern:"TODO"},p=class extends n.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("trash","Remove old tasks",async()=>{await this.cleanOldTasks()}),this.addCommand({id:"tasks-cleaner-remove-old-tasks",name:"Remove old tasks",callback:async()=>{await this.cleanOldTasks()}}),this.addSettingTab(new k(this.app,this)),new n.Notice("Tasks Cleaner plugin loaded.")}async cleanOldTasks(){let t=this.app.vault.getMarkdownFiles(),e=new Date,s=new Date(e.getTime()-this.settings.daysThreshold*24*60*60*1e3),o=new RegExp(this.settings.taskPattern),r=[];for(let l of t){if(this.settings.filenamePattern&&!l.name.includes(this.settings.filenamePattern))continue;let u=await this.app.vault.read(l),h=u.split(`
`),c=[],w=0,d=0;for(;d<h.length;){let T=h[d].match(o);if(T&&new Date(T[1])<s){c.push(d),w++;let g=d+1;for(;g<h.length&&h[g].match(/^\s+/);)c.push(g),g++;d=g;continue}d++}c.length>0&&r.push({file:l,linesToDelete:c,taskCount:w,content:u})}if(r.length===0){new n.Notice("There are no tasks to delete.");return}new f(this.app,r,async()=>{for(let l of r){let u=l.content.split(`
`).filter((h,c)=>!l.linesToDelete.includes(c));await this.app.vault.modify(l.file,u.join(`
`))}new n.Notice("Outdated tasks have been deleted.")}).open()}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},f=class extends n.Modal{constructor(t,e,s){super(t);this.results=e;this.onConfirm=s}onOpen(){let{contentEl:t}=this;t.createEl("h2",{text:"Confirmation of deletion"});let e=t.createEl("ul");for(let{file:o,taskCount:r}of this.results)e.createEl("li",{text:`${o.path}: ${r} tasks will be deleted`});let s=t.createEl("button",{text:"Clear",cls:"tasks-cleaner-button-clear"});s.onclick=()=>{this.onConfirm(),this.close()}}onClose(){this.contentEl.empty()}},k=class extends n.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;new n.Setting(t).setName("Delete issues older than (days)").setDesc("Completed tasks older than this number of days will be deleted.").addText(e=>e.setPlaceholder("for example, 7").setValue(this.plugin.settings.daysThreshold.toString()).onChange(async s=>{let o=parseInt(s);isNaN(o)||(this.plugin.settings.daysThreshold=o,await this.plugin.saveSettings())})),new n.Setting(t).setName("Task template").setDesc("A regular expression for searching for completed tasks. It must contain the completion date.").addText(e=>e.setPlaceholder("- [x] ... \u2705 yyyy-mm-dd").setValue(this.plugin.settings.taskPattern).onChange(async s=>{this.plugin.settings.taskPattern=s,await this.plugin.saveSettings()})),new n.Setting(t).setName("Filter by file name").setDesc("If specified, tasks will be cleared only in files containing this line in the name.").addText(e=>e.setPlaceholder("TODO").setValue(this.plugin.settings.filenamePattern).onChange(async s=>{this.plugin.settings.filenamePattern=s,await this.plugin.saveSettings()}))}};

/* nosourcemap */